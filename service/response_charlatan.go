// generated by "charlatan -output=./response_charlatan.go Response".  DO NOT EDIT.

package service

import (
	"io"
	"net/http"
	"reflect"
	"testing"
)

// StatusCodeInvocation represents a single call of FakeResponse.StatusCode
type StatusCodeInvocation struct {
	Results struct {
		Ident1 int
	}
}

// HeadersInvocation represents a single call of FakeResponse.Headers
type HeadersInvocation struct {
	Results struct {
		Ident1 http.Header
	}
}

// TrailersInvocation represents a single call of FakeResponse.Trailers
type TrailersInvocation struct {
	Results struct {
		Ident1 http.Header
	}
}

// SerializeInvocation represents a single call of FakeResponse.Serialize
type SerializeInvocation struct {
	Parameters struct {
		Ident1 io.Writer
	}
	Results struct {
		Ident2 int
		Ident3 error
	}
}

/*
FakeResponse is a mock implementation of Response for testing.
Use it in your tests as in this example:

	package example

	func TestWithResponse(t *testing.T) {
		f := &service.FakeResponse{
			StatusCodeHook: func() (ident1 int) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeStatusCode ...
		f.AssertStatusCodeCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeStatusCode.
*/
type FakeResponse struct {
	StatusCodeHook func() int
	HeadersHook    func() http.Header
	TrailersHook   func() http.Header
	SerializeHook  func(io.Writer) (int, error)

	StatusCodeCalls []*StatusCodeInvocation
	HeadersCalls    []*HeadersInvocation
	TrailersCalls   []*TrailersInvocation
	SerializeCalls  []*SerializeInvocation
}

// NewFakeResponseDefaultPanic returns an instance of FakeResponse with all hooks configured to panic
func NewFakeResponseDefaultPanic() *FakeResponse {
	return &FakeResponse{
		StatusCodeHook: func() (ident1 int) {
			panic("Unexpected call to Response.StatusCode")
		},
		HeadersHook: func() (ident1 http.Header) {
			panic("Unexpected call to Response.Headers")
		},
		TrailersHook: func() (ident1 http.Header) {
			panic("Unexpected call to Response.Trailers")
		},
		SerializeHook: func(io.Writer) (ident2 int, ident3 error) {
			panic("Unexpected call to Response.Serialize")
		},
	}
}

// NewFakeResponseDefaultFatal returns an instance of FakeResponse with all hooks configured to call t.Fatal
func NewFakeResponseDefaultFatal(t *testing.T) *FakeResponse {
	return &FakeResponse{
		StatusCodeHook: func() (ident1 int) {
			t.Fatal("Unexpected call to Response.StatusCode")
			return
		},
		HeadersHook: func() (ident1 http.Header) {
			t.Fatal("Unexpected call to Response.Headers")
			return
		},
		TrailersHook: func() (ident1 http.Header) {
			t.Fatal("Unexpected call to Response.Trailers")
			return
		},
		SerializeHook: func(io.Writer) (ident2 int, ident3 error) {
			t.Fatal("Unexpected call to Response.Serialize")
			return
		},
	}
}

// NewFakeResponseDefaultError returns an instance of FakeResponse with all hooks configured to call t.Error
func NewFakeResponseDefaultError(t *testing.T) *FakeResponse {
	return &FakeResponse{
		StatusCodeHook: func() (ident1 int) {
			t.Error("Unexpected call to Response.StatusCode")
			return
		},
		HeadersHook: func() (ident1 http.Header) {
			t.Error("Unexpected call to Response.Headers")
			return
		},
		TrailersHook: func() (ident1 http.Header) {
			t.Error("Unexpected call to Response.Trailers")
			return
		},
		SerializeHook: func(io.Writer) (ident2 int, ident3 error) {
			t.Error("Unexpected call to Response.Serialize")
			return
		},
	}
}

func (f *FakeResponse) Reset() {
	f.StatusCodeCalls = []*StatusCodeInvocation{}
	f.HeadersCalls = []*HeadersInvocation{}
	f.TrailersCalls = []*TrailersInvocation{}
	f.SerializeCalls = []*SerializeInvocation{}
}

func (_f1 *FakeResponse) StatusCode() (ident1 int) {
	invocation := new(StatusCodeInvocation)

	ident1 = _f1.StatusCodeHook()

	invocation.Results.Ident1 = ident1

	_f1.StatusCodeCalls = append(_f1.StatusCodeCalls, invocation)

	return
}

// StatusCodeCalled returns true if FakeResponse.StatusCode was called
func (f *FakeResponse) StatusCodeCalled() bool {
	return len(f.StatusCodeCalls) != 0
}

// AssertStatusCodeCalled calls t.Error if FakeResponse.StatusCode was not called
func (f *FakeResponse) AssertStatusCodeCalled(t *testing.T) {
	t.Helper()
	if len(f.StatusCodeCalls) == 0 {
		t.Error("FakeResponse.StatusCode not called, expected at least one")
	}
}

// StatusCodeNotCalled returns true if FakeResponse.StatusCode was not called
func (f *FakeResponse) StatusCodeNotCalled() bool {
	return len(f.StatusCodeCalls) == 0
}

// AssertStatusCodeNotCalled calls t.Error if FakeResponse.StatusCode was called
func (f *FakeResponse) AssertStatusCodeNotCalled(t *testing.T) {
	t.Helper()
	if len(f.StatusCodeCalls) != 0 {
		t.Error("FakeResponse.StatusCode called, expected none")
	}
}

// StatusCodeCalledOnce returns true if FakeResponse.StatusCode was called exactly once
func (f *FakeResponse) StatusCodeCalledOnce() bool {
	return len(f.StatusCodeCalls) == 1
}

// AssertStatusCodeCalledOnce calls t.Error if FakeResponse.StatusCode was not called exactly once
func (f *FakeResponse) AssertStatusCodeCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.StatusCodeCalls) != 1 {
		t.Errorf("FakeResponse.StatusCode called %d times, expected 1", len(f.StatusCodeCalls))
	}
}

// StatusCodeCalledN returns true if FakeResponse.StatusCode was called at least n times
func (f *FakeResponse) StatusCodeCalledN(n int) bool {
	return len(f.StatusCodeCalls) >= n
}

// AssertStatusCodeCalledN calls t.Error if FakeResponse.StatusCode was called less than n times
func (f *FakeResponse) AssertStatusCodeCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.StatusCodeCalls) < n {
		t.Errorf("FakeResponse.StatusCode called %d times, expected >= %d", len(f.StatusCodeCalls), n)
	}
}

func (_f2 *FakeResponse) Headers() (ident1 http.Header) {
	invocation := new(HeadersInvocation)

	ident1 = _f2.HeadersHook()

	invocation.Results.Ident1 = ident1

	_f2.HeadersCalls = append(_f2.HeadersCalls, invocation)

	return
}

// HeadersCalled returns true if FakeResponse.Headers was called
func (f *FakeResponse) HeadersCalled() bool {
	return len(f.HeadersCalls) != 0
}

// AssertHeadersCalled calls t.Error if FakeResponse.Headers was not called
func (f *FakeResponse) AssertHeadersCalled(t *testing.T) {
	t.Helper()
	if len(f.HeadersCalls) == 0 {
		t.Error("FakeResponse.Headers not called, expected at least one")
	}
}

// HeadersNotCalled returns true if FakeResponse.Headers was not called
func (f *FakeResponse) HeadersNotCalled() bool {
	return len(f.HeadersCalls) == 0
}

// AssertHeadersNotCalled calls t.Error if FakeResponse.Headers was called
func (f *FakeResponse) AssertHeadersNotCalled(t *testing.T) {
	t.Helper()
	if len(f.HeadersCalls) != 0 {
		t.Error("FakeResponse.Headers called, expected none")
	}
}

// HeadersCalledOnce returns true if FakeResponse.Headers was called exactly once
func (f *FakeResponse) HeadersCalledOnce() bool {
	return len(f.HeadersCalls) == 1
}

// AssertHeadersCalledOnce calls t.Error if FakeResponse.Headers was not called exactly once
func (f *FakeResponse) AssertHeadersCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.HeadersCalls) != 1 {
		t.Errorf("FakeResponse.Headers called %d times, expected 1", len(f.HeadersCalls))
	}
}

// HeadersCalledN returns true if FakeResponse.Headers was called at least n times
func (f *FakeResponse) HeadersCalledN(n int) bool {
	return len(f.HeadersCalls) >= n
}

// AssertHeadersCalledN calls t.Error if FakeResponse.Headers was called less than n times
func (f *FakeResponse) AssertHeadersCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.HeadersCalls) < n {
		t.Errorf("FakeResponse.Headers called %d times, expected >= %d", len(f.HeadersCalls), n)
	}
}

func (_f3 *FakeResponse) Trailers() (ident1 http.Header) {
	invocation := new(TrailersInvocation)

	ident1 = _f3.TrailersHook()

	invocation.Results.Ident1 = ident1

	_f3.TrailersCalls = append(_f3.TrailersCalls, invocation)

	return
}

// TrailersCalled returns true if FakeResponse.Trailers was called
func (f *FakeResponse) TrailersCalled() bool {
	return len(f.TrailersCalls) != 0
}

// AssertTrailersCalled calls t.Error if FakeResponse.Trailers was not called
func (f *FakeResponse) AssertTrailersCalled(t *testing.T) {
	t.Helper()
	if len(f.TrailersCalls) == 0 {
		t.Error("FakeResponse.Trailers not called, expected at least one")
	}
}

// TrailersNotCalled returns true if FakeResponse.Trailers was not called
func (f *FakeResponse) TrailersNotCalled() bool {
	return len(f.TrailersCalls) == 0
}

// AssertTrailersNotCalled calls t.Error if FakeResponse.Trailers was called
func (f *FakeResponse) AssertTrailersNotCalled(t *testing.T) {
	t.Helper()
	if len(f.TrailersCalls) != 0 {
		t.Error("FakeResponse.Trailers called, expected none")
	}
}

// TrailersCalledOnce returns true if FakeResponse.Trailers was called exactly once
func (f *FakeResponse) TrailersCalledOnce() bool {
	return len(f.TrailersCalls) == 1
}

// AssertTrailersCalledOnce calls t.Error if FakeResponse.Trailers was not called exactly once
func (f *FakeResponse) AssertTrailersCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.TrailersCalls) != 1 {
		t.Errorf("FakeResponse.Trailers called %d times, expected 1", len(f.TrailersCalls))
	}
}

// TrailersCalledN returns true if FakeResponse.Trailers was called at least n times
func (f *FakeResponse) TrailersCalledN(n int) bool {
	return len(f.TrailersCalls) >= n
}

// AssertTrailersCalledN calls t.Error if FakeResponse.Trailers was called less than n times
func (f *FakeResponse) AssertTrailersCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.TrailersCalls) < n {
		t.Errorf("FakeResponse.Trailers called %d times, expected >= %d", len(f.TrailersCalls), n)
	}
}

func (_f4 *FakeResponse) Serialize(ident1 io.Writer) (ident2 int, ident3 error) {
	invocation := new(SerializeInvocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f4.SerializeHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	_f4.SerializeCalls = append(_f4.SerializeCalls, invocation)

	return
}

// SerializeCalled returns true if FakeResponse.Serialize was called
func (f *FakeResponse) SerializeCalled() bool {
	return len(f.SerializeCalls) != 0
}

// AssertSerializeCalled calls t.Error if FakeResponse.Serialize was not called
func (f *FakeResponse) AssertSerializeCalled(t *testing.T) {
	t.Helper()
	if len(f.SerializeCalls) == 0 {
		t.Error("FakeResponse.Serialize not called, expected at least one")
	}
}

// SerializeNotCalled returns true if FakeResponse.Serialize was not called
func (f *FakeResponse) SerializeNotCalled() bool {
	return len(f.SerializeCalls) == 0
}

// AssertSerializeNotCalled calls t.Error if FakeResponse.Serialize was called
func (f *FakeResponse) AssertSerializeNotCalled(t *testing.T) {
	t.Helper()
	if len(f.SerializeCalls) != 0 {
		t.Error("FakeResponse.Serialize called, expected none")
	}
}

// SerializeCalledOnce returns true if FakeResponse.Serialize was called exactly once
func (f *FakeResponse) SerializeCalledOnce() bool {
	return len(f.SerializeCalls) == 1
}

// AssertSerializeCalledOnce calls t.Error if FakeResponse.Serialize was not called exactly once
func (f *FakeResponse) AssertSerializeCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.SerializeCalls) != 1 {
		t.Errorf("FakeResponse.Serialize called %d times, expected 1", len(f.SerializeCalls))
	}
}

// SerializeCalledN returns true if FakeResponse.Serialize was called at least n times
func (f *FakeResponse) SerializeCalledN(n int) bool {
	return len(f.SerializeCalls) >= n
}

// AssertSerializeCalledN calls t.Error if FakeResponse.Serialize was called less than n times
func (f *FakeResponse) AssertSerializeCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.SerializeCalls) < n {
		t.Errorf("FakeResponse.Serialize called %d times, expected >= %d", len(f.SerializeCalls), n)
	}
}

// SerializeCalledWith returns true if FakeResponse.Serialize was called with the given values
func (_f5 *FakeResponse) SerializeCalledWith(ident1 io.Writer) (found bool) {
	for _, call := range _f5.SerializeCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertSerializeCalledWith calls t.Error if FakeResponse.Serialize was not called with the given values
func (_f6 *FakeResponse) AssertSerializeCalledWith(t *testing.T, ident1 io.Writer) {
	t.Helper()
	var found bool
	for _, call := range _f6.SerializeCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeResponse.Serialize not called with expected parameters")
	}
}

// SerializeCalledOnceWith returns true if FakeResponse.Serialize was called exactly once with the given values
func (_f7 *FakeResponse) SerializeCalledOnceWith(ident1 io.Writer) bool {
	var count int
	for _, call := range _f7.SerializeCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertSerializeCalledOnceWith calls t.Error if FakeResponse.Serialize was not called exactly once with the given values
func (_f8 *FakeResponse) AssertSerializeCalledOnceWith(t *testing.T, ident1 io.Writer) {
	t.Helper()
	var count int
	for _, call := range _f8.SerializeCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeResponse.Serialize called %d times with expected parameters, expected one", count)
	}
}

// SerializeResultsForCall returns the result values for the first call to FakeResponse.Serialize with the given values
func (_f9 *FakeResponse) SerializeResultsForCall(ident1 io.Writer) (ident2 int, ident3 error, found bool) {
	for _, call := range _f9.SerializeCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}
