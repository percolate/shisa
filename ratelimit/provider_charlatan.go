// generated by "charlatan -output=./provider_charlatan.go Provider".  DO NOT EDIT.

package ratelimit

import (
	"reflect"
	"testing"

	"github.com/ansel1/merry"
)

// ProviderLimitInvocation represents a single call of FakeProvider.Limit
type ProviderLimitInvocation struct {
	Parameters struct {
		Actor  string
		Action string
		Path   string
	}
	Results struct {
		Ident1 RateLimit
		Ident2 merry.Error
	}
}

// ProviderAllowInvocation represents a single call of FakeProvider.Allow
type ProviderAllowInvocation struct {
	Parameters struct {
		Actor  string
		Action string
		Path   string
	}
	Results struct {
		Ident1 bool
		Ident2 merry.Error
	}
}

// ProviderPingInvocation represents a single call of FakeProvider.Ping
type ProviderPingInvocation struct {
	Results struct {
		Ident1 error
	}
}

// ProviderCloseInvocation represents a single call of FakeProvider.Close
type ProviderCloseInvocation struct {
}

/*
FakeProvider is a mock implementation of Provider for testing.
Use it in your tests as in this example:

	package example

	func TestWithProvider(t *testing.T) {
		f := &ratelimit.FakeProvider{
			LimitHook: func(actor string, action string, path string) (ident1 RateLimit, ident2 merry.Error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeLimit ...
		f.AssertLimitCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeLimit.
*/
type FakeProvider struct {
	LimitHook func(string, string, string) (RateLimit, merry.Error)
	AllowHook func(string, string, string) (bool, merry.Error)
	PingHook  func() error
	CloseHook func()

	LimitCalls []*ProviderLimitInvocation
	AllowCalls []*ProviderAllowInvocation
	PingCalls  []*ProviderPingInvocation
	CloseCalls []*ProviderCloseInvocation
}

// NewFakeProviderDefaultPanic returns an instance of FakeProvider with all hooks configured to panic
func NewFakeProviderDefaultPanic() *FakeProvider {
	return &FakeProvider{
		LimitHook: func(string, string, string) (ident1 RateLimit, ident2 merry.Error) {
			panic("Unexpected call to Provider.Limit")
		},
		AllowHook: func(string, string, string) (ident1 bool, ident2 merry.Error) {
			panic("Unexpected call to Provider.Allow")
		},
		PingHook: func() (ident1 error) {
			panic("Unexpected call to Provider.Ping")
		},
		CloseHook: func() {
			panic("Unexpected call to Provider.Close")
		},
	}
}

// NewFakeProviderDefaultFatal returns an instance of FakeProvider with all hooks configured to call t.Fatal
func NewFakeProviderDefaultFatal(t *testing.T) *FakeProvider {
	return &FakeProvider{
		LimitHook: func(string, string, string) (ident1 RateLimit, ident2 merry.Error) {
			t.Fatal("Unexpected call to Provider.Limit")
			return
		},
		AllowHook: func(string, string, string) (ident1 bool, ident2 merry.Error) {
			t.Fatal("Unexpected call to Provider.Allow")
			return
		},
		PingHook: func() (ident1 error) {
			t.Fatal("Unexpected call to Provider.Ping")
			return
		},
		CloseHook: func() {
			t.Fatal("Unexpected call to Provider.Close")
			return
		},
	}
}

// NewFakeProviderDefaultError returns an instance of FakeProvider with all hooks configured to call t.Error
func NewFakeProviderDefaultError(t *testing.T) *FakeProvider {
	return &FakeProvider{
		LimitHook: func(string, string, string) (ident1 RateLimit, ident2 merry.Error) {
			t.Error("Unexpected call to Provider.Limit")
			return
		},
		AllowHook: func(string, string, string) (ident1 bool, ident2 merry.Error) {
			t.Error("Unexpected call to Provider.Allow")
			return
		},
		PingHook: func() (ident1 error) {
			t.Error("Unexpected call to Provider.Ping")
			return
		},
		CloseHook: func() {
			t.Error("Unexpected call to Provider.Close")
			return
		},
	}
}

func (f *FakeProvider) Reset() {
	f.LimitCalls = []*ProviderLimitInvocation{}
	f.AllowCalls = []*ProviderAllowInvocation{}
	f.PingCalls = []*ProviderPingInvocation{}
	f.CloseCalls = []*ProviderCloseInvocation{}
}

func (_f1 *FakeProvider) Limit(actor string, action string, path string) (ident1 RateLimit, ident2 merry.Error) {
	invocation := new(ProviderLimitInvocation)

	invocation.Parameters.Actor = actor
	invocation.Parameters.Action = action
	invocation.Parameters.Path = path

	ident1, ident2 = _f1.LimitHook(actor, action, path)

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	_f1.LimitCalls = append(_f1.LimitCalls, invocation)

	return
}

// LimitCalled returns true if FakeProvider.Limit was called
func (f *FakeProvider) LimitCalled() bool {
	return len(f.LimitCalls) != 0
}

// AssertLimitCalled calls t.Error if FakeProvider.Limit was not called
func (f *FakeProvider) AssertLimitCalled(t *testing.T) {
	t.Helper()
	if len(f.LimitCalls) == 0 {
		t.Error("FakeProvider.Limit not called, expected at least one")
	}
}

// LimitNotCalled returns true if FakeProvider.Limit was not called
func (f *FakeProvider) LimitNotCalled() bool {
	return len(f.LimitCalls) == 0
}

// AssertLimitNotCalled calls t.Error if FakeProvider.Limit was called
func (f *FakeProvider) AssertLimitNotCalled(t *testing.T) {
	t.Helper()
	if len(f.LimitCalls) != 0 {
		t.Error("FakeProvider.Limit called, expected none")
	}
}

// LimitCalledOnce returns true if FakeProvider.Limit was called exactly once
func (f *FakeProvider) LimitCalledOnce() bool {
	return len(f.LimitCalls) == 1
}

// AssertLimitCalledOnce calls t.Error if FakeProvider.Limit was not called exactly once
func (f *FakeProvider) AssertLimitCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.LimitCalls) != 1 {
		t.Errorf("FakeProvider.Limit called %d times, expected 1", len(f.LimitCalls))
	}
}

// LimitCalledN returns true if FakeProvider.Limit was called at least n times
func (f *FakeProvider) LimitCalledN(n int) bool {
	return len(f.LimitCalls) >= n
}

// AssertLimitCalledN calls t.Error if FakeProvider.Limit was called less than n times
func (f *FakeProvider) AssertLimitCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.LimitCalls) < n {
		t.Errorf("FakeProvider.Limit called %d times, expected >= %d", len(f.LimitCalls), n)
	}
}

// LimitCalledWith returns true if FakeProvider.Limit was called with the given values
func (_f2 *FakeProvider) LimitCalledWith(actor string, action string, path string) (found bool) {
	for _, call := range _f2.LimitCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			found = true
			break
		}
	}

	return
}

// AssertLimitCalledWith calls t.Error if FakeProvider.Limit was not called with the given values
func (_f3 *FakeProvider) AssertLimitCalledWith(t *testing.T, actor string, action string, path string) {
	t.Helper()
	var found bool
	for _, call := range _f3.LimitCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.Limit not called with expected parameters")
	}
}

// LimitCalledOnceWith returns true if FakeProvider.Limit was called exactly once with the given values
func (_f4 *FakeProvider) LimitCalledOnceWith(actor string, action string, path string) bool {
	var count int
	for _, call := range _f4.LimitCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			count++
		}
	}

	return count == 1
}

// AssertLimitCalledOnceWith calls t.Error if FakeProvider.Limit was not called exactly once with the given values
func (_f5 *FakeProvider) AssertLimitCalledOnceWith(t *testing.T, actor string, action string, path string) {
	t.Helper()
	var count int
	for _, call := range _f5.LimitCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.Limit called %d times with expected parameters, expected one", count)
	}
}

// LimitResultsForCall returns the result values for the first call to FakeProvider.Limit with the given values
func (_f6 *FakeProvider) LimitResultsForCall(actor string, action string, path string) (ident1 RateLimit, ident2 merry.Error, found bool) {
	for _, call := range _f6.LimitCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			ident1 = call.Results.Ident1
			ident2 = call.Results.Ident2
			found = true
			break
		}
	}

	return
}

func (_f7 *FakeProvider) Allow(actor string, action string, path string) (ident1 bool, ident2 merry.Error) {
	invocation := new(ProviderAllowInvocation)

	invocation.Parameters.Actor = actor
	invocation.Parameters.Action = action
	invocation.Parameters.Path = path

	ident1, ident2 = _f7.AllowHook(actor, action, path)

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	_f7.AllowCalls = append(_f7.AllowCalls, invocation)

	return
}

// AllowCalled returns true if FakeProvider.Allow was called
func (f *FakeProvider) AllowCalled() bool {
	return len(f.AllowCalls) != 0
}

// AssertAllowCalled calls t.Error if FakeProvider.Allow was not called
func (f *FakeProvider) AssertAllowCalled(t *testing.T) {
	t.Helper()
	if len(f.AllowCalls) == 0 {
		t.Error("FakeProvider.Allow not called, expected at least one")
	}
}

// AllowNotCalled returns true if FakeProvider.Allow was not called
func (f *FakeProvider) AllowNotCalled() bool {
	return len(f.AllowCalls) == 0
}

// AssertAllowNotCalled calls t.Error if FakeProvider.Allow was called
func (f *FakeProvider) AssertAllowNotCalled(t *testing.T) {
	t.Helper()
	if len(f.AllowCalls) != 0 {
		t.Error("FakeProvider.Allow called, expected none")
	}
}

// AllowCalledOnce returns true if FakeProvider.Allow was called exactly once
func (f *FakeProvider) AllowCalledOnce() bool {
	return len(f.AllowCalls) == 1
}

// AssertAllowCalledOnce calls t.Error if FakeProvider.Allow was not called exactly once
func (f *FakeProvider) AssertAllowCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.AllowCalls) != 1 {
		t.Errorf("FakeProvider.Allow called %d times, expected 1", len(f.AllowCalls))
	}
}

// AllowCalledN returns true if FakeProvider.Allow was called at least n times
func (f *FakeProvider) AllowCalledN(n int) bool {
	return len(f.AllowCalls) >= n
}

// AssertAllowCalledN calls t.Error if FakeProvider.Allow was called less than n times
func (f *FakeProvider) AssertAllowCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.AllowCalls) < n {
		t.Errorf("FakeProvider.Allow called %d times, expected >= %d", len(f.AllowCalls), n)
	}
}

// AllowCalledWith returns true if FakeProvider.Allow was called with the given values
func (_f8 *FakeProvider) AllowCalledWith(actor string, action string, path string) (found bool) {
	for _, call := range _f8.AllowCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			found = true
			break
		}
	}

	return
}

// AssertAllowCalledWith calls t.Error if FakeProvider.Allow was not called with the given values
func (_f9 *FakeProvider) AssertAllowCalledWith(t *testing.T, actor string, action string, path string) {
	t.Helper()
	var found bool
	for _, call := range _f9.AllowCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.Allow not called with expected parameters")
	}
}

// AllowCalledOnceWith returns true if FakeProvider.Allow was called exactly once with the given values
func (_f10 *FakeProvider) AllowCalledOnceWith(actor string, action string, path string) bool {
	var count int
	for _, call := range _f10.AllowCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			count++
		}
	}

	return count == 1
}

// AssertAllowCalledOnceWith calls t.Error if FakeProvider.Allow was not called exactly once with the given values
func (_f11 *FakeProvider) AssertAllowCalledOnceWith(t *testing.T, actor string, action string, path string) {
	t.Helper()
	var count int
	for _, call := range _f11.AllowCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.Allow called %d times with expected parameters, expected one", count)
	}
}

// AllowResultsForCall returns the result values for the first call to FakeProvider.Allow with the given values
func (_f12 *FakeProvider) AllowResultsForCall(actor string, action string, path string) (ident1 bool, ident2 merry.Error, found bool) {
	for _, call := range _f12.AllowCalls {
		if reflect.DeepEqual(call.Parameters.Actor, actor) && reflect.DeepEqual(call.Parameters.Action, action) && reflect.DeepEqual(call.Parameters.Path, path) {
			ident1 = call.Results.Ident1
			ident2 = call.Results.Ident2
			found = true
			break
		}
	}

	return
}

func (_f13 *FakeProvider) Ping() (ident1 error) {
	invocation := new(ProviderPingInvocation)

	ident1 = _f13.PingHook()

	invocation.Results.Ident1 = ident1

	_f13.PingCalls = append(_f13.PingCalls, invocation)

	return
}

// PingCalled returns true if FakeProvider.Ping was called
func (f *FakeProvider) PingCalled() bool {
	return len(f.PingCalls) != 0
}

// AssertPingCalled calls t.Error if FakeProvider.Ping was not called
func (f *FakeProvider) AssertPingCalled(t *testing.T) {
	t.Helper()
	if len(f.PingCalls) == 0 {
		t.Error("FakeProvider.Ping not called, expected at least one")
	}
}

// PingNotCalled returns true if FakeProvider.Ping was not called
func (f *FakeProvider) PingNotCalled() bool {
	return len(f.PingCalls) == 0
}

// AssertPingNotCalled calls t.Error if FakeProvider.Ping was called
func (f *FakeProvider) AssertPingNotCalled(t *testing.T) {
	t.Helper()
	if len(f.PingCalls) != 0 {
		t.Error("FakeProvider.Ping called, expected none")
	}
}

// PingCalledOnce returns true if FakeProvider.Ping was called exactly once
func (f *FakeProvider) PingCalledOnce() bool {
	return len(f.PingCalls) == 1
}

// AssertPingCalledOnce calls t.Error if FakeProvider.Ping was not called exactly once
func (f *FakeProvider) AssertPingCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.PingCalls) != 1 {
		t.Errorf("FakeProvider.Ping called %d times, expected 1", len(f.PingCalls))
	}
}

// PingCalledN returns true if FakeProvider.Ping was called at least n times
func (f *FakeProvider) PingCalledN(n int) bool {
	return len(f.PingCalls) >= n
}

// AssertPingCalledN calls t.Error if FakeProvider.Ping was called less than n times
func (f *FakeProvider) AssertPingCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.PingCalls) < n {
		t.Errorf("FakeProvider.Ping called %d times, expected >= %d", len(f.PingCalls), n)
	}
}

func (_f14 *FakeProvider) Close() {
	invocation := new(ProviderCloseInvocation)

	_f14.CloseHook()

	_f14.CloseCalls = append(_f14.CloseCalls, invocation)

	return
}

// CloseCalled returns true if FakeProvider.Close was called
func (f *FakeProvider) CloseCalled() bool {
	return len(f.CloseCalls) != 0
}

// AssertCloseCalled calls t.Error if FakeProvider.Close was not called
func (f *FakeProvider) AssertCloseCalled(t *testing.T) {
	t.Helper()
	if len(f.CloseCalls) == 0 {
		t.Error("FakeProvider.Close not called, expected at least one")
	}
}

// CloseNotCalled returns true if FakeProvider.Close was not called
func (f *FakeProvider) CloseNotCalled() bool {
	return len(f.CloseCalls) == 0
}

// AssertCloseNotCalled calls t.Error if FakeProvider.Close was called
func (f *FakeProvider) AssertCloseNotCalled(t *testing.T) {
	t.Helper()
	if len(f.CloseCalls) != 0 {
		t.Error("FakeProvider.Close called, expected none")
	}
}

// CloseCalledOnce returns true if FakeProvider.Close was called exactly once
func (f *FakeProvider) CloseCalledOnce() bool {
	return len(f.CloseCalls) == 1
}

// AssertCloseCalledOnce calls t.Error if FakeProvider.Close was not called exactly once
func (f *FakeProvider) AssertCloseCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.CloseCalls) != 1 {
		t.Errorf("FakeProvider.Close called %d times, expected 1", len(f.CloseCalls))
	}
}

// CloseCalledN returns true if FakeProvider.Close was called at least n times
func (f *FakeProvider) CloseCalledN(n int) bool {
	return len(f.CloseCalls) >= n
}

// AssertCloseCalledN calls t.Error if FakeProvider.Close was called less than n times
func (f *FakeProvider) AssertCloseCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.CloseCalls) < n {
		t.Errorf("FakeProvider.Close called %d times, expected >= %d", len(f.CloseCalls), n)
	}
}
