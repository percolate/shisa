// generated by "charlatan -output=./provider_charlatan.go Provider".  DO NOT EDIT.

package authn

import (
	"reflect"
	"testing"

	"github.com/ansel1/merry"
	"github.com/percolate/shisa/context"
	"github.com/percolate/shisa/models"
	"github.com/percolate/shisa/service"
)

// ProviderAuthenticateInvocation represents a single call of FakeProvider.Authenticate
type ProviderAuthenticateInvocation struct {
	Parameters struct {
		Ident1 context.Context
		Ident2 *service.Request
	}
	Results struct {
		Ident3 models.User
		Ident4 merry.Error
	}
}

// ProviderChallengeInvocation represents a single call of FakeProvider.Challenge
type ProviderChallengeInvocation struct {
	Results struct {
		Ident1 string
	}
}

/*
FakeProvider is a mock implementation of Provider for testing.
Use it in your tests as in this example:

	package example

	func TestWithProvider(t *testing.T) {
		f := &authn.FakeProvider{
			AuthenticateHook: func(ident1 context.Context, ident2 *service.Request) (ident3 models.User, ident4 merry.Error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeAuthenticate ...
		f.AssertAuthenticateCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeAuthenticate.
*/
type FakeProvider struct {
	AuthenticateHook func(context.Context, *service.Request) (models.User, merry.Error)
	ChallengeHook    func() string

	AuthenticateCalls []*ProviderAuthenticateInvocation
	ChallengeCalls    []*ProviderChallengeInvocation
}

// NewFakeProviderDefaultPanic returns an instance of FakeProvider with all hooks configured to panic
func NewFakeProviderDefaultPanic() *FakeProvider {
	return &FakeProvider{
		AuthenticateHook: func(context.Context, *service.Request) (ident3 models.User, ident4 merry.Error) {
			panic("Unexpected call to Provider.Authenticate")
		},
		ChallengeHook: func() (ident1 string) {
			panic("Unexpected call to Provider.Challenge")
		},
	}
}

// NewFakeProviderDefaultFatal returns an instance of FakeProvider with all hooks configured to call t.Fatal
func NewFakeProviderDefaultFatal(t *testing.T) *FakeProvider {
	return &FakeProvider{
		AuthenticateHook: func(context.Context, *service.Request) (ident3 models.User, ident4 merry.Error) {
			t.Fatal("Unexpected call to Provider.Authenticate")
			return
		},
		ChallengeHook: func() (ident1 string) {
			t.Fatal("Unexpected call to Provider.Challenge")
			return
		},
	}
}

// NewFakeProviderDefaultError returns an instance of FakeProvider with all hooks configured to call t.Error
func NewFakeProviderDefaultError(t *testing.T) *FakeProvider {
	return &FakeProvider{
		AuthenticateHook: func(context.Context, *service.Request) (ident3 models.User, ident4 merry.Error) {
			t.Error("Unexpected call to Provider.Authenticate")
			return
		},
		ChallengeHook: func() (ident1 string) {
			t.Error("Unexpected call to Provider.Challenge")
			return
		},
	}
}

func (f *FakeProvider) Reset() {
	f.AuthenticateCalls = []*ProviderAuthenticateInvocation{}
	f.ChallengeCalls = []*ProviderChallengeInvocation{}
}

func (_f1 *FakeProvider) Authenticate(ident1 context.Context, ident2 *service.Request) (ident3 models.User, ident4 merry.Error) {
	invocation := new(ProviderAuthenticateInvocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	ident3, ident4 = _f1.AuthenticateHook(ident1, ident2)

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4

	_f1.AuthenticateCalls = append(_f1.AuthenticateCalls, invocation)

	return
}

// AuthenticateCalled returns true if FakeProvider.Authenticate was called
func (f *FakeProvider) AuthenticateCalled() bool {
	return len(f.AuthenticateCalls) != 0
}

// AssertAuthenticateCalled calls t.Error if FakeProvider.Authenticate was not called
func (f *FakeProvider) AssertAuthenticateCalled(t *testing.T) {
	t.Helper()
	if len(f.AuthenticateCalls) == 0 {
		t.Error("FakeProvider.Authenticate not called, expected at least one")
	}
}

// AuthenticateNotCalled returns true if FakeProvider.Authenticate was not called
func (f *FakeProvider) AuthenticateNotCalled() bool {
	return len(f.AuthenticateCalls) == 0
}

// AssertAuthenticateNotCalled calls t.Error if FakeProvider.Authenticate was called
func (f *FakeProvider) AssertAuthenticateNotCalled(t *testing.T) {
	t.Helper()
	if len(f.AuthenticateCalls) != 0 {
		t.Error("FakeProvider.Authenticate called, expected none")
	}
}

// AuthenticateCalledOnce returns true if FakeProvider.Authenticate was called exactly once
func (f *FakeProvider) AuthenticateCalledOnce() bool {
	return len(f.AuthenticateCalls) == 1
}

// AssertAuthenticateCalledOnce calls t.Error if FakeProvider.Authenticate was not called exactly once
func (f *FakeProvider) AssertAuthenticateCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.AuthenticateCalls) != 1 {
		t.Errorf("FakeProvider.Authenticate called %d times, expected 1", len(f.AuthenticateCalls))
	}
}

// AuthenticateCalledN returns true if FakeProvider.Authenticate was called at least n times
func (f *FakeProvider) AuthenticateCalledN(n int) bool {
	return len(f.AuthenticateCalls) >= n
}

// AssertAuthenticateCalledN calls t.Error if FakeProvider.Authenticate was called less than n times
func (f *FakeProvider) AssertAuthenticateCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.AuthenticateCalls) < n {
		t.Errorf("FakeProvider.Authenticate called %d times, expected >= %d", len(f.AuthenticateCalls), n)
	}
}

// AuthenticateCalledWith returns true if FakeProvider.Authenticate was called with the given values
func (_f2 *FakeProvider) AuthenticateCalledWith(ident1 context.Context, ident2 *service.Request) (found bool) {
	for _, call := range _f2.AuthenticateCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertAuthenticateCalledWith calls t.Error if FakeProvider.Authenticate was not called with the given values
func (_f3 *FakeProvider) AssertAuthenticateCalledWith(t *testing.T, ident1 context.Context, ident2 *service.Request) {
	t.Helper()
	var found bool
	for _, call := range _f3.AuthenticateCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.Authenticate not called with expected parameters")
	}
}

// AuthenticateCalledOnceWith returns true if FakeProvider.Authenticate was called exactly once with the given values
func (_f4 *FakeProvider) AuthenticateCalledOnceWith(ident1 context.Context, ident2 *service.Request) bool {
	var count int
	for _, call := range _f4.AuthenticateCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertAuthenticateCalledOnceWith calls t.Error if FakeProvider.Authenticate was not called exactly once with the given values
func (_f5 *FakeProvider) AssertAuthenticateCalledOnceWith(t *testing.T, ident1 context.Context, ident2 *service.Request) {
	t.Helper()
	var count int
	for _, call := range _f5.AuthenticateCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.Authenticate called %d times with expected parameters, expected one", count)
	}
}

// AuthenticateResultsForCall returns the result values for the first call to FakeProvider.Authenticate with the given values
func (_f6 *FakeProvider) AuthenticateResultsForCall(ident1 context.Context, ident2 *service.Request) (ident3 models.User, ident4 merry.Error, found bool) {
	for _, call := range _f6.AuthenticateCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			ident3 = call.Results.Ident3
			ident4 = call.Results.Ident4
			found = true
			break
		}
	}

	return
}

func (_f7 *FakeProvider) Challenge() (ident1 string) {
	invocation := new(ProviderChallengeInvocation)

	ident1 = _f7.ChallengeHook()

	invocation.Results.Ident1 = ident1

	_f7.ChallengeCalls = append(_f7.ChallengeCalls, invocation)

	return
}

// ChallengeCalled returns true if FakeProvider.Challenge was called
func (f *FakeProvider) ChallengeCalled() bool {
	return len(f.ChallengeCalls) != 0
}

// AssertChallengeCalled calls t.Error if FakeProvider.Challenge was not called
func (f *FakeProvider) AssertChallengeCalled(t *testing.T) {
	t.Helper()
	if len(f.ChallengeCalls) == 0 {
		t.Error("FakeProvider.Challenge not called, expected at least one")
	}
}

// ChallengeNotCalled returns true if FakeProvider.Challenge was not called
func (f *FakeProvider) ChallengeNotCalled() bool {
	return len(f.ChallengeCalls) == 0
}

// AssertChallengeNotCalled calls t.Error if FakeProvider.Challenge was called
func (f *FakeProvider) AssertChallengeNotCalled(t *testing.T) {
	t.Helper()
	if len(f.ChallengeCalls) != 0 {
		t.Error("FakeProvider.Challenge called, expected none")
	}
}

// ChallengeCalledOnce returns true if FakeProvider.Challenge was called exactly once
func (f *FakeProvider) ChallengeCalledOnce() bool {
	return len(f.ChallengeCalls) == 1
}

// AssertChallengeCalledOnce calls t.Error if FakeProvider.Challenge was not called exactly once
func (f *FakeProvider) AssertChallengeCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.ChallengeCalls) != 1 {
		t.Errorf("FakeProvider.Challenge called %d times, expected 1", len(f.ChallengeCalls))
	}
}

// ChallengeCalledN returns true if FakeProvider.Challenge was called at least n times
func (f *FakeProvider) ChallengeCalledN(n int) bool {
	return len(f.ChallengeCalls) >= n
}

// AssertChallengeCalledN calls t.Error if FakeProvider.Challenge was called less than n times
func (f *FakeProvider) AssertChallengeCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.ChallengeCalls) < n {
		t.Errorf("FakeProvider.Challenge called %d times, expected >= %d", len(f.ChallengeCalls), n)
	}
}
