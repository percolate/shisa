// generated by "charlatan -output=./context_charlatan.go Context".  DO NOT EDIT.

package context

import (
	"testing"

	"github.com/percolate/shisa/models"
)

// RequestIDInvocation represents a single call of FakeContext.RequestID
type RequestIDInvocation struct {
	Results struct {
		Ident1 string
	}
}

// ActorInvocation represents a single call of FakeContext.Actor
type ActorInvocation struct {
	Results struct {
		Ident2 models.User
	}
}

/*
FakeContext is a mock implementation of Context for testing.
Use it in your tests as in this example:

	package example

	func TestWithContext(t *testing.T) {
		f := &context.FakeContext{
			RequestIDHook: func() (ident1 string) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeRequestID ...
		f.AssertRequestIDCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a painc if any
unexpected calls are made to FakeRequestID.
*/
type FakeContext struct {
	RequestIDHook func() string
	ActorHook     func() models.User

	RequestIDCalls []*RequestIDInvocation
	ActorCalls     []*ActorInvocation
}

// NewFakeContextDefaultPanic returns an instance of FakeContext with all hooks configured to panic
func NewFakeContextDefaultPanic() *FakeContext {
	return &FakeContext{
		RequestIDHook: func() (ident1 string) {
			panic("Unexpected call to Context.RequestID")
			return
		},
		ActorHook: func() (ident2 models.User) {
			panic("Unexpected call to Context.Actor")
			return
		},
	}
}

// NewFakeContextDefaultFatal returns an instance of FakeContext with all hooks configured to call t.Fatal
func NewFakeContextDefaultFatal(t *testing.T) *FakeContext {
	return &FakeContext{
		RequestIDHook: func() (ident1 string) {
			t.Fatal("Unexpected call to Context.RequestID")
			return
		},
		ActorHook: func() (ident2 models.User) {
			t.Fatal("Unexpected call to Context.Actor")
			return
		},
	}
}

// NewFakeContextDefaultError returns an instance of FakeContext with all hooks configured to call t.Error
func NewFakeContextDefaultError(t *testing.T) *FakeContext {
	return &FakeContext{
		RequestIDHook: func() (ident1 string) {
			t.Error("Unexpected call to Context.RequestID")
			return
		},
		ActorHook: func() (ident2 models.User) {
			t.Error("Unexpected call to Context.Actor")
			return
		},
	}
}

func (_f1 *FakeContext) RequestID() (ident1 string) {
	invocation := new(RequestIDInvocation)

	ident1 = _f1.RequestIDHook()

	invocation.Results.Ident1 = ident1

	_f1.RequestIDCalls = append(_f1.RequestIDCalls, invocation)

	return
}

// RequestIDCalled returns true if FakeContext.RequestID was called
func (f *FakeContext) RequestIDCalled() bool {
	return len(f.RequestIDCalls) != 0
}

// AssertRequestIDCalled calls t.Error if FakeContext.RequestID was not called
func (f *FakeContext) AssertRequestIDCalled(t *testing.T) {
	t.Helper()
	if len(f.RequestIDCalls) == 0 {
		t.Error("FakeContext.RequestID not called, expected at least one")
	}
}

// RequestIDNotCalled returns true if FakeContext.RequestID was not called
func (f *FakeContext) RequestIDNotCalled() bool {
	return len(f.RequestIDCalls) == 0
}

// AssertRequestIDNotCalled calls t.Error if FakeContext.RequestID was called
func (f *FakeContext) AssertRequestIDNotCalled(t *testing.T) {
	t.Helper()
	if len(f.RequestIDCalls) != 0 {
		t.Error("FakeContext.RequestID called, expected none")
	}
}

// RequestIDCalledOnce returns true if FakeContext.RequestID was called exactly once
func (f *FakeContext) RequestIDCalledOnce() bool {
	return len(f.RequestIDCalls) == 1
}

// AssertRequestIDCalledOnce calls t.Error if FakeContext.RequestID was not called exactly once
func (f *FakeContext) AssertRequestIDCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.RequestIDCalls) != 1 {
		t.Errorf("FakeContext.RequestID called %d times, expected 1", len(f.RequestIDCalls))
	}
}

// RequestIDCalledN returns true if FakeContext.RequestID was called at least n times
func (f *FakeContext) RequestIDCalledN(n int) bool {
	return len(f.RequestIDCalls) >= n
}

// AssertRequestIDCalledN calls t.Error if FakeContext.RequestID was called less than n times
func (f *FakeContext) AssertRequestIDCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.RequestIDCalls) < n {
		t.Errorf("FakeContext.RequestID called %d times, expected >= %d", len(f.RequestIDCalls), n)
	}
}

func (_f2 *FakeContext) Actor() (ident2 models.User) {
	invocation := new(ActorInvocation)

	ident2 = _f2.ActorHook()

	invocation.Results.Ident2 = ident2

	_f2.ActorCalls = append(_f2.ActorCalls, invocation)

	return
}

// ActorCalled returns true if FakeContext.Actor was called
func (f *FakeContext) ActorCalled() bool {
	return len(f.ActorCalls) != 0
}

// AssertActorCalled calls t.Error if FakeContext.Actor was not called
func (f *FakeContext) AssertActorCalled(t *testing.T) {
	t.Helper()
	if len(f.ActorCalls) == 0 {
		t.Error("FakeContext.Actor not called, expected at least one")
	}
}

// ActorNotCalled returns true if FakeContext.Actor was not called
func (f *FakeContext) ActorNotCalled() bool {
	return len(f.ActorCalls) == 0
}

// AssertActorNotCalled calls t.Error if FakeContext.Actor was called
func (f *FakeContext) AssertActorNotCalled(t *testing.T) {
	t.Helper()
	if len(f.ActorCalls) != 0 {
		t.Error("FakeContext.Actor called, expected none")
	}
}

// ActorCalledOnce returns true if FakeContext.Actor was called exactly once
func (f *FakeContext) ActorCalledOnce() bool {
	return len(f.ActorCalls) == 1
}

// AssertActorCalledOnce calls t.Error if FakeContext.Actor was not called exactly once
func (f *FakeContext) AssertActorCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.ActorCalls) != 1 {
		t.Errorf("FakeContext.Actor called %d times, expected 1", len(f.ActorCalls))
	}
}

// ActorCalledN returns true if FakeContext.Actor was called at least n times
func (f *FakeContext) ActorCalledN(n int) bool {
	return len(f.ActorCalls) >= n
}

// AssertActorCalledN calls t.Error if FakeContext.Actor was called less than n times
func (f *FakeContext) AssertActorCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.ActorCalls) < n {
		t.Errorf("FakeContext.Actor called %d times, expected >= %d", len(f.ActorCalls), n)
	}
}
