// generated by "charlatan -output=./provider_charlatan.go EnvironmentProvider".  DO NOT EDIT.

package env

import (
	"reflect"
	"testing"

	"github.com/ansel1/merry"
)

// GetInvocation represents a single call of FakeEnvironmentProvider.Get
type GetInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 string
		Ident3 merry.Error
	}
}

// GetIntInvocation represents a single call of FakeEnvironmentProvider.GetInt
type GetIntInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 int
		Ident3 merry.Error
	}
}

// GetBoolInvocation represents a single call of FakeEnvironmentProvider.GetBool
type GetBoolInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 bool
		Ident3 merry.Error
	}
}

// MonitorInvocation represents a single call of FakeEnvironmentProvider.Monitor
type MonitorInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 <-chan Value
	}
}

/*
FakeEnvironmentProvider is a mock implementation of EnvironmentProvider for testing.
Use it in your tests as in this example:

	package example

	func TestWithEnvironmentProvider(t *testing.T) {
		f := &env.FakeEnvironmentProvider{
			GetHook: func(ident1 string) (ident2 string, ident3 merry.Error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeGet ...
		f.AssertGetCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeGet.
*/
type FakeEnvironmentProvider struct {
	GetHook     func(string) (string, merry.Error)
	GetIntHook  func(string) (int, merry.Error)
	GetBoolHook func(string) (bool, merry.Error)
	MonitorHook func(string, <-chan Value)

	GetCalls     []*GetInvocation
	GetIntCalls  []*GetIntInvocation
	GetBoolCalls []*GetBoolInvocation
	MonitorCalls []*MonitorInvocation
}

// NewFakeEnvironmentProviderDefaultPanic returns an instance of FakeEnvironmentProvider with all hooks configured to panic
func NewFakeEnvironmentProviderDefaultPanic() *FakeEnvironmentProvider {
	return &FakeEnvironmentProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			panic("Unexpected call to EnvironmentProvider.Get")
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			panic("Unexpected call to EnvironmentProvider.GetInt")
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			panic("Unexpected call to EnvironmentProvider.GetBool")
		},
		MonitorHook: func(string, <-chan Value) {
			panic("Unexpected call to EnvironmentProvider.Monitor")
		},
	}
}

// NewFakeEnvironmentProviderDefaultFatal returns an instance of FakeEnvironmentProvider with all hooks configured to call t.Fatal
func NewFakeEnvironmentProviderDefaultFatal(t *testing.T) *FakeEnvironmentProvider {
	return &FakeEnvironmentProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			t.Fatal("Unexpected call to EnvironmentProvider.Get")
			return
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			t.Fatal("Unexpected call to EnvironmentProvider.GetInt")
			return
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			t.Fatal("Unexpected call to EnvironmentProvider.GetBool")
			return
		},
		MonitorHook: func(string, <-chan Value) {
			t.Fatal("Unexpected call to EnvironmentProvider.Monitor")
			return
		},
	}
}

// NewFakeEnvironmentProviderDefaultError returns an instance of FakeEnvironmentProvider with all hooks configured to call t.Error
func NewFakeEnvironmentProviderDefaultError(t *testing.T) *FakeEnvironmentProvider {
	return &FakeEnvironmentProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			t.Error("Unexpected call to EnvironmentProvider.Get")
			return
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			t.Error("Unexpected call to EnvironmentProvider.GetInt")
			return
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			t.Error("Unexpected call to EnvironmentProvider.GetBool")
			return
		},
		MonitorHook: func(string, <-chan Value) {
			t.Error("Unexpected call to EnvironmentProvider.Monitor")
			return
		},
	}
}

func (f *FakeEnvironmentProvider) Reset() {
	f.GetCalls = []*GetInvocation{}
	f.GetIntCalls = []*GetIntInvocation{}
	f.GetBoolCalls = []*GetBoolInvocation{}
	f.MonitorCalls = []*MonitorInvocation{}
}

func (_f1 *FakeEnvironmentProvider) Get(ident1 string) (ident2 string, ident3 merry.Error) {
	invocation := new(GetInvocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f1.GetHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	_f1.GetCalls = append(_f1.GetCalls, invocation)

	return
}

// GetCalled returns true if FakeEnvironmentProvider.Get was called
func (f *FakeEnvironmentProvider) GetCalled() bool {
	return len(f.GetCalls) != 0
}

// AssertGetCalled calls t.Error if FakeEnvironmentProvider.Get was not called
func (f *FakeEnvironmentProvider) AssertGetCalled(t *testing.T) {
	t.Helper()
	if len(f.GetCalls) == 0 {
		t.Error("FakeEnvironmentProvider.Get not called, expected at least one")
	}
}

// GetNotCalled returns true if FakeEnvironmentProvider.Get was not called
func (f *FakeEnvironmentProvider) GetNotCalled() bool {
	return len(f.GetCalls) == 0
}

// AssertGetNotCalled calls t.Error if FakeEnvironmentProvider.Get was called
func (f *FakeEnvironmentProvider) AssertGetNotCalled(t *testing.T) {
	t.Helper()
	if len(f.GetCalls) != 0 {
		t.Error("FakeEnvironmentProvider.Get called, expected none")
	}
}

// GetCalledOnce returns true if FakeEnvironmentProvider.Get was called exactly once
func (f *FakeEnvironmentProvider) GetCalledOnce() bool {
	return len(f.GetCalls) == 1
}

// AssertGetCalledOnce calls t.Error if FakeEnvironmentProvider.Get was not called exactly once
func (f *FakeEnvironmentProvider) AssertGetCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.GetCalls) != 1 {
		t.Errorf("FakeEnvironmentProvider.Get called %d times, expected 1", len(f.GetCalls))
	}
}

// GetCalledN returns true if FakeEnvironmentProvider.Get was called at least n times
func (f *FakeEnvironmentProvider) GetCalledN(n int) bool {
	return len(f.GetCalls) >= n
}

// AssertGetCalledN calls t.Error if FakeEnvironmentProvider.Get was called less than n times
func (f *FakeEnvironmentProvider) AssertGetCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.GetCalls) < n {
		t.Errorf("FakeEnvironmentProvider.Get called %d times, expected >= %d", len(f.GetCalls), n)
	}
}

// GetCalledWith returns true if FakeEnvironmentProvider.Get was called with the given values
func (_f2 *FakeEnvironmentProvider) GetCalledWith(ident1 string) (found bool) {
	for _, call := range _f2.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetCalledWith calls t.Error if FakeEnvironmentProvider.Get was not called with the given values
func (_f3 *FakeEnvironmentProvider) AssertGetCalledWith(t *testing.T, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f3.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeEnvironmentProvider.Get not called with expected parameters")
	}
}

// GetCalledOnceWith returns true if FakeEnvironmentProvider.Get was called exactly once with the given values
func (_f4 *FakeEnvironmentProvider) GetCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f4.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetCalledOnceWith calls t.Error if FakeEnvironmentProvider.Get was not called exactly once with the given values
func (_f5 *FakeEnvironmentProvider) AssertGetCalledOnceWith(t *testing.T, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f5.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeEnvironmentProvider.Get called %d times with expected parameters, expected one", count)
	}
}

// GetResultsForCall returns the result values for the first call to FakeEnvironmentProvider.Get with the given values
func (_f6 *FakeEnvironmentProvider) GetResultsForCall(ident1 string) (ident2 string, ident3 merry.Error, found bool) {
	for _, call := range _f6.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f7 *FakeEnvironmentProvider) GetInt(ident1 string) (ident2 int, ident3 merry.Error) {
	invocation := new(GetIntInvocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f7.GetIntHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	_f7.GetIntCalls = append(_f7.GetIntCalls, invocation)

	return
}

// GetIntCalled returns true if FakeEnvironmentProvider.GetInt was called
func (f *FakeEnvironmentProvider) GetIntCalled() bool {
	return len(f.GetIntCalls) != 0
}

// AssertGetIntCalled calls t.Error if FakeEnvironmentProvider.GetInt was not called
func (f *FakeEnvironmentProvider) AssertGetIntCalled(t *testing.T) {
	t.Helper()
	if len(f.GetIntCalls) == 0 {
		t.Error("FakeEnvironmentProvider.GetInt not called, expected at least one")
	}
}

// GetIntNotCalled returns true if FakeEnvironmentProvider.GetInt was not called
func (f *FakeEnvironmentProvider) GetIntNotCalled() bool {
	return len(f.GetIntCalls) == 0
}

// AssertGetIntNotCalled calls t.Error if FakeEnvironmentProvider.GetInt was called
func (f *FakeEnvironmentProvider) AssertGetIntNotCalled(t *testing.T) {
	t.Helper()
	if len(f.GetIntCalls) != 0 {
		t.Error("FakeEnvironmentProvider.GetInt called, expected none")
	}
}

// GetIntCalledOnce returns true if FakeEnvironmentProvider.GetInt was called exactly once
func (f *FakeEnvironmentProvider) GetIntCalledOnce() bool {
	return len(f.GetIntCalls) == 1
}

// AssertGetIntCalledOnce calls t.Error if FakeEnvironmentProvider.GetInt was not called exactly once
func (f *FakeEnvironmentProvider) AssertGetIntCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.GetIntCalls) != 1 {
		t.Errorf("FakeEnvironmentProvider.GetInt called %d times, expected 1", len(f.GetIntCalls))
	}
}

// GetIntCalledN returns true if FakeEnvironmentProvider.GetInt was called at least n times
func (f *FakeEnvironmentProvider) GetIntCalledN(n int) bool {
	return len(f.GetIntCalls) >= n
}

// AssertGetIntCalledN calls t.Error if FakeEnvironmentProvider.GetInt was called less than n times
func (f *FakeEnvironmentProvider) AssertGetIntCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.GetIntCalls) < n {
		t.Errorf("FakeEnvironmentProvider.GetInt called %d times, expected >= %d", len(f.GetIntCalls), n)
	}
}

// GetIntCalledWith returns true if FakeEnvironmentProvider.GetInt was called with the given values
func (_f8 *FakeEnvironmentProvider) GetIntCalledWith(ident1 string) (found bool) {
	for _, call := range _f8.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetIntCalledWith calls t.Error if FakeEnvironmentProvider.GetInt was not called with the given values
func (_f9 *FakeEnvironmentProvider) AssertGetIntCalledWith(t *testing.T, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f9.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeEnvironmentProvider.GetInt not called with expected parameters")
	}
}

// GetIntCalledOnceWith returns true if FakeEnvironmentProvider.GetInt was called exactly once with the given values
func (_f10 *FakeEnvironmentProvider) GetIntCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f10.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetIntCalledOnceWith calls t.Error if FakeEnvironmentProvider.GetInt was not called exactly once with the given values
func (_f11 *FakeEnvironmentProvider) AssertGetIntCalledOnceWith(t *testing.T, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f11.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeEnvironmentProvider.GetInt called %d times with expected parameters, expected one", count)
	}
}

// GetIntResultsForCall returns the result values for the first call to FakeEnvironmentProvider.GetInt with the given values
func (_f12 *FakeEnvironmentProvider) GetIntResultsForCall(ident1 string) (ident2 int, ident3 merry.Error, found bool) {
	for _, call := range _f12.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f13 *FakeEnvironmentProvider) GetBool(ident1 string) (ident2 bool, ident3 merry.Error) {
	invocation := new(GetBoolInvocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f13.GetBoolHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	_f13.GetBoolCalls = append(_f13.GetBoolCalls, invocation)

	return
}

// GetBoolCalled returns true if FakeEnvironmentProvider.GetBool was called
func (f *FakeEnvironmentProvider) GetBoolCalled() bool {
	return len(f.GetBoolCalls) != 0
}

// AssertGetBoolCalled calls t.Error if FakeEnvironmentProvider.GetBool was not called
func (f *FakeEnvironmentProvider) AssertGetBoolCalled(t *testing.T) {
	t.Helper()
	if len(f.GetBoolCalls) == 0 {
		t.Error("FakeEnvironmentProvider.GetBool not called, expected at least one")
	}
}

// GetBoolNotCalled returns true if FakeEnvironmentProvider.GetBool was not called
func (f *FakeEnvironmentProvider) GetBoolNotCalled() bool {
	return len(f.GetBoolCalls) == 0
}

// AssertGetBoolNotCalled calls t.Error if FakeEnvironmentProvider.GetBool was called
func (f *FakeEnvironmentProvider) AssertGetBoolNotCalled(t *testing.T) {
	t.Helper()
	if len(f.GetBoolCalls) != 0 {
		t.Error("FakeEnvironmentProvider.GetBool called, expected none")
	}
}

// GetBoolCalledOnce returns true if FakeEnvironmentProvider.GetBool was called exactly once
func (f *FakeEnvironmentProvider) GetBoolCalledOnce() bool {
	return len(f.GetBoolCalls) == 1
}

// AssertGetBoolCalledOnce calls t.Error if FakeEnvironmentProvider.GetBool was not called exactly once
func (f *FakeEnvironmentProvider) AssertGetBoolCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.GetBoolCalls) != 1 {
		t.Errorf("FakeEnvironmentProvider.GetBool called %d times, expected 1", len(f.GetBoolCalls))
	}
}

// GetBoolCalledN returns true if FakeEnvironmentProvider.GetBool was called at least n times
func (f *FakeEnvironmentProvider) GetBoolCalledN(n int) bool {
	return len(f.GetBoolCalls) >= n
}

// AssertGetBoolCalledN calls t.Error if FakeEnvironmentProvider.GetBool was called less than n times
func (f *FakeEnvironmentProvider) AssertGetBoolCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.GetBoolCalls) < n {
		t.Errorf("FakeEnvironmentProvider.GetBool called %d times, expected >= %d", len(f.GetBoolCalls), n)
	}
}

// GetBoolCalledWith returns true if FakeEnvironmentProvider.GetBool was called with the given values
func (_f14 *FakeEnvironmentProvider) GetBoolCalledWith(ident1 string) (found bool) {
	for _, call := range _f14.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetBoolCalledWith calls t.Error if FakeEnvironmentProvider.GetBool was not called with the given values
func (_f15 *FakeEnvironmentProvider) AssertGetBoolCalledWith(t *testing.T, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f15.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeEnvironmentProvider.GetBool not called with expected parameters")
	}
}

// GetBoolCalledOnceWith returns true if FakeEnvironmentProvider.GetBool was called exactly once with the given values
func (_f16 *FakeEnvironmentProvider) GetBoolCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f16.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetBoolCalledOnceWith calls t.Error if FakeEnvironmentProvider.GetBool was not called exactly once with the given values
func (_f17 *FakeEnvironmentProvider) AssertGetBoolCalledOnceWith(t *testing.T, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f17.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeEnvironmentProvider.GetBool called %d times with expected parameters, expected one", count)
	}
}

// GetBoolResultsForCall returns the result values for the first call to FakeEnvironmentProvider.GetBool with the given values
func (_f18 *FakeEnvironmentProvider) GetBoolResultsForCall(ident1 string) (ident2 bool, ident3 merry.Error, found bool) {
	for _, call := range _f18.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f19 *FakeEnvironmentProvider) Monitor(ident1 string, ident2 <-chan Value) {
	invocation := new(MonitorInvocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	_f19.MonitorHook(ident1, ident2)

	_f19.MonitorCalls = append(_f19.MonitorCalls, invocation)

	return
}

// MonitorCalled returns true if FakeEnvironmentProvider.Monitor was called
func (f *FakeEnvironmentProvider) MonitorCalled() bool {
	return len(f.MonitorCalls) != 0
}

// AssertMonitorCalled calls t.Error if FakeEnvironmentProvider.Monitor was not called
func (f *FakeEnvironmentProvider) AssertMonitorCalled(t *testing.T) {
	t.Helper()
	if len(f.MonitorCalls) == 0 {
		t.Error("FakeEnvironmentProvider.Monitor not called, expected at least one")
	}
}

// MonitorNotCalled returns true if FakeEnvironmentProvider.Monitor was not called
func (f *FakeEnvironmentProvider) MonitorNotCalled() bool {
	return len(f.MonitorCalls) == 0
}

// AssertMonitorNotCalled calls t.Error if FakeEnvironmentProvider.Monitor was called
func (f *FakeEnvironmentProvider) AssertMonitorNotCalled(t *testing.T) {
	t.Helper()
	if len(f.MonitorCalls) != 0 {
		t.Error("FakeEnvironmentProvider.Monitor called, expected none")
	}
}

// MonitorCalledOnce returns true if FakeEnvironmentProvider.Monitor was called exactly once
func (f *FakeEnvironmentProvider) MonitorCalledOnce() bool {
	return len(f.MonitorCalls) == 1
}

// AssertMonitorCalledOnce calls t.Error if FakeEnvironmentProvider.Monitor was not called exactly once
func (f *FakeEnvironmentProvider) AssertMonitorCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.MonitorCalls) != 1 {
		t.Errorf("FakeEnvironmentProvider.Monitor called %d times, expected 1", len(f.MonitorCalls))
	}
}

// MonitorCalledN returns true if FakeEnvironmentProvider.Monitor was called at least n times
func (f *FakeEnvironmentProvider) MonitorCalledN(n int) bool {
	return len(f.MonitorCalls) >= n
}

// AssertMonitorCalledN calls t.Error if FakeEnvironmentProvider.Monitor was called less than n times
func (f *FakeEnvironmentProvider) AssertMonitorCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.MonitorCalls) < n {
		t.Errorf("FakeEnvironmentProvider.Monitor called %d times, expected >= %d", len(f.MonitorCalls), n)
	}
}

// MonitorCalledWith returns true if FakeEnvironmentProvider.Monitor was called with the given values
func (_f20 *FakeEnvironmentProvider) MonitorCalledWith(ident1 string, ident2 <-chan Value) (found bool) {
	for _, call := range _f20.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertMonitorCalledWith calls t.Error if FakeEnvironmentProvider.Monitor was not called with the given values
func (_f21 *FakeEnvironmentProvider) AssertMonitorCalledWith(t *testing.T, ident1 string, ident2 <-chan Value) {
	t.Helper()
	var found bool
	for _, call := range _f21.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeEnvironmentProvider.Monitor not called with expected parameters")
	}
}

// MonitorCalledOnceWith returns true if FakeEnvironmentProvider.Monitor was called exactly once with the given values
func (_f22 *FakeEnvironmentProvider) MonitorCalledOnceWith(ident1 string, ident2 <-chan Value) bool {
	var count int
	for _, call := range _f22.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertMonitorCalledOnceWith calls t.Error if FakeEnvironmentProvider.Monitor was not called exactly once with the given values
func (_f23 *FakeEnvironmentProvider) AssertMonitorCalledOnceWith(t *testing.T, ident1 string, ident2 <-chan Value) {
	t.Helper()
	var count int
	for _, call := range _f23.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeEnvironmentProvider.Monitor called %d times with expected parameters, expected one", count)
	}
}
