// generated by "charlatan -output=./consulselfer_charlatan.go Selfer".  DO NOT EDIT.

package env

// SelferSelfInvocation represents a single call of FakeSelfer.Self
type SelferSelfInvocation struct {
	Results struct {
		Ident1 map[string]map[string]interface{}
		Ident2 error
	}
}

// SelferTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type SelferTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeSelfer is a mock implementation of Selfer for testing.
Use it in your tests as in this example:

	package example

	func TestWithSelfer(t *testing.T) {
		f := &env.FakeSelfer{
			SelfHook: func() (ident1 map[string]map[string]interface{}, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeSelf ...
		f.AssertSelfCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeSelf.
*/
type FakeSelfer struct {
	SelfHook func() (map[string]map[string]interface{}, error)

	SelfCalls []*SelferSelfInvocation
}

// NewFakeSelferDefaultPanic returns an instance of FakeSelfer with all hooks configured to panic
func NewFakeSelferDefaultPanic() *FakeSelfer {
	return &FakeSelfer{
		SelfHook: func() (ident1 map[string]map[string]interface{}, ident2 error) {
			panic("Unexpected call to Selfer.Self")
		},
	}
}

// NewFakeSelferDefaultFatal returns an instance of FakeSelfer with all hooks configured to call t.Fatal
func NewFakeSelferDefaultFatal(t SelferTestingT) *FakeSelfer {
	return &FakeSelfer{
		SelfHook: func() (ident1 map[string]map[string]interface{}, ident2 error) {
			t.Fatal("Unexpected call to Selfer.Self")
			return
		},
	}
}

// NewFakeSelferDefaultError returns an instance of FakeSelfer with all hooks configured to call t.Error
func NewFakeSelferDefaultError(t SelferTestingT) *FakeSelfer {
	return &FakeSelfer{
		SelfHook: func() (ident1 map[string]map[string]interface{}, ident2 error) {
			t.Error("Unexpected call to Selfer.Self")
			return
		},
	}
}

func (f *FakeSelfer) Reset() {
	f.SelfCalls = []*SelferSelfInvocation{}
}

func (_f1 *FakeSelfer) Self() (ident1 map[string]map[string]interface{}, ident2 error) {
	invocation := new(SelferSelfInvocation)
	_f1.SelfCalls = append(_f1.SelfCalls, invocation)

	ident1, ident2 = _f1.SelfHook()

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return
}

// SelfCalled returns true if FakeSelfer.Self was called
func (f *FakeSelfer) SelfCalled() bool {
	return len(f.SelfCalls) != 0
}

// AssertSelfCalled calls t.Error if FakeSelfer.Self was not called
func (f *FakeSelfer) AssertSelfCalled(t SelferTestingT) {
	t.Helper()
	if len(f.SelfCalls) == 0 {
		t.Error("FakeSelfer.Self not called, expected at least one")
	}
}

// SelfNotCalled returns true if FakeSelfer.Self was not called
func (f *FakeSelfer) SelfNotCalled() bool {
	return len(f.SelfCalls) == 0
}

// AssertSelfNotCalled calls t.Error if FakeSelfer.Self was called
func (f *FakeSelfer) AssertSelfNotCalled(t SelferTestingT) {
	t.Helper()
	if len(f.SelfCalls) != 0 {
		t.Error("FakeSelfer.Self called, expected none")
	}
}

// SelfCalledOnce returns true if FakeSelfer.Self was called exactly once
func (f *FakeSelfer) SelfCalledOnce() bool {
	return len(f.SelfCalls) == 1
}

// AssertSelfCalledOnce calls t.Error if FakeSelfer.Self was not called exactly once
func (f *FakeSelfer) AssertSelfCalledOnce(t SelferTestingT) {
	t.Helper()
	if len(f.SelfCalls) != 1 {
		t.Errorf("FakeSelfer.Self called %d times, expected 1", len(f.SelfCalls))
	}
}

// SelfCalledN returns true if FakeSelfer.Self was called at least n times
func (f *FakeSelfer) SelfCalledN(n int) bool {
	return len(f.SelfCalls) >= n
}

// AssertSelfCalledN calls t.Error if FakeSelfer.Self was called less than n times
func (f *FakeSelfer) AssertSelfCalledN(t SelferTestingT, n int) {
	t.Helper()
	if len(f.SelfCalls) < n {
		t.Errorf("FakeSelfer.Self called %d times, expected >= %d", len(f.SelfCalls), n)
	}
}
