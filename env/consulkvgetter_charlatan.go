// generated by "charlatan -output=./consulkvgetter_charlatan.go KVGetter".  DO NOT EDIT.

package env

import "reflect"

import consul "github.com/hashicorp/consul/api"

// KVGetterGetInvocation represents a single call of FakeKVGetter.Get
type KVGetterGetInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 *consul.QueryOptions
	}
	Results struct {
		Ident3 *consul.KVPair
		Ident4 *consul.QueryMeta
		Ident5 error
	}
}

// KVGetterListInvocation represents a single call of FakeKVGetter.List
type KVGetterListInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 *consul.QueryOptions
	}
	Results struct {
		Ident3 consul.KVPairs
		Ident4 *consul.QueryMeta
		Ident5 error
	}
}

// KVGetterTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type KVGetterTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeKVGetter is a mock implementation of KVGetter for testing.
Use it in your tests as in this example:

	package example

	func TestWithKVGetter(t *testing.T) {
		f := &env.FakeKVGetter{
			GetHook: func(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeGet ...
		f.AssertGetCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeGet.
*/
type FakeKVGetter struct {
	GetHook  func(string, *consul.QueryOptions) (*consul.KVPair, *consul.QueryMeta, error)
	ListHook func(string, *consul.QueryOptions) (consul.KVPairs, *consul.QueryMeta, error)

	GetCalls  []*KVGetterGetInvocation
	ListCalls []*KVGetterListInvocation
}

// NewFakeKVGetterDefaultPanic returns an instance of FakeKVGetter with all hooks configured to panic
func NewFakeKVGetterDefaultPanic() *FakeKVGetter {
	return &FakeKVGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			panic("Unexpected call to KVGetter.Get")
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			panic("Unexpected call to KVGetter.List")
		},
	}
}

// NewFakeKVGetterDefaultFatal returns an instance of FakeKVGetter with all hooks configured to call t.Fatal
func NewFakeKVGetterDefaultFatal(t KVGetterTestingT) *FakeKVGetter {
	return &FakeKVGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			t.Fatal("Unexpected call to KVGetter.Get")
			return
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			t.Fatal("Unexpected call to KVGetter.List")
			return
		},
	}
}

// NewFakeKVGetterDefaultError returns an instance of FakeKVGetter with all hooks configured to call t.Error
func NewFakeKVGetterDefaultError(t KVGetterTestingT) *FakeKVGetter {
	return &FakeKVGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			t.Error("Unexpected call to KVGetter.Get")
			return
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			t.Error("Unexpected call to KVGetter.List")
			return
		},
	}
}

func (f *FakeKVGetter) Reset() {
	f.GetCalls = []*KVGetterGetInvocation{}
	f.ListCalls = []*KVGetterListInvocation{}
}

func (_f1 *FakeKVGetter) Get(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
	invocation := new(KVGetterGetInvocation)
	_f1.GetCalls = append(_f1.GetCalls, invocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	ident3, ident4, ident5 = _f1.GetHook(ident1, ident2)

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return
}

// GetCalled returns true if FakeKVGetter.Get was called
func (f *FakeKVGetter) GetCalled() bool {
	return len(f.GetCalls) != 0
}

// AssertGetCalled calls t.Error if FakeKVGetter.Get was not called
func (f *FakeKVGetter) AssertGetCalled(t KVGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) == 0 {
		t.Error("FakeKVGetter.Get not called, expected at least one")
	}
}

// GetNotCalled returns true if FakeKVGetter.Get was not called
func (f *FakeKVGetter) GetNotCalled() bool {
	return len(f.GetCalls) == 0
}

// AssertGetNotCalled calls t.Error if FakeKVGetter.Get was called
func (f *FakeKVGetter) AssertGetNotCalled(t KVGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) != 0 {
		t.Error("FakeKVGetter.Get called, expected none")
	}
}

// GetCalledOnce returns true if FakeKVGetter.Get was called exactly once
func (f *FakeKVGetter) GetCalledOnce() bool {
	return len(f.GetCalls) == 1
}

// AssertGetCalledOnce calls t.Error if FakeKVGetter.Get was not called exactly once
func (f *FakeKVGetter) AssertGetCalledOnce(t KVGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) != 1 {
		t.Errorf("FakeKVGetter.Get called %d times, expected 1", len(f.GetCalls))
	}
}

// GetCalledN returns true if FakeKVGetter.Get was called at least n times
func (f *FakeKVGetter) GetCalledN(n int) bool {
	return len(f.GetCalls) >= n
}

// AssertGetCalledN calls t.Error if FakeKVGetter.Get was called less than n times
func (f *FakeKVGetter) AssertGetCalledN(t KVGetterTestingT, n int) {
	t.Helper()
	if len(f.GetCalls) < n {
		t.Errorf("FakeKVGetter.Get called %d times, expected >= %d", len(f.GetCalls), n)
	}
}

// GetCalledWith returns true if FakeKVGetter.Get was called with the given values
func (_f2 *FakeKVGetter) GetCalledWith(ident1 string, ident2 *consul.QueryOptions) (found bool) {
	for _, call := range _f2.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertGetCalledWith calls t.Error if FakeKVGetter.Get was not called with the given values
func (_f3 *FakeKVGetter) AssertGetCalledWith(t KVGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var found bool
	for _, call := range _f3.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeKVGetter.Get not called with expected parameters")
	}
}

// GetCalledOnceWith returns true if FakeKVGetter.Get was called exactly once with the given values
func (_f4 *FakeKVGetter) GetCalledOnceWith(ident1 string, ident2 *consul.QueryOptions) bool {
	var count int
	for _, call := range _f4.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertGetCalledOnceWith calls t.Error if FakeKVGetter.Get was not called exactly once with the given values
func (_f5 *FakeKVGetter) AssertGetCalledOnceWith(t KVGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var count int
	for _, call := range _f5.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeKVGetter.Get called %d times with expected parameters, expected one", count)
	}
}

// GetResultsForCall returns the result values for the first call to FakeKVGetter.Get with the given values
func (_f6 *FakeKVGetter) GetResultsForCall(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error, found bool) {
	for _, call := range _f6.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			ident3 = call.Results.Ident3
			ident4 = call.Results.Ident4
			ident5 = call.Results.Ident5
			found = true
			break
		}
	}

	return
}

func (_f7 *FakeKVGetter) List(ident1 string, ident2 *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
	invocation := new(KVGetterListInvocation)
	_f7.ListCalls = append(_f7.ListCalls, invocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	ident3, ident4, ident5 = _f7.ListHook(ident1, ident2)

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return
}

// ListCalled returns true if FakeKVGetter.List was called
func (f *FakeKVGetter) ListCalled() bool {
	return len(f.ListCalls) != 0
}

// AssertListCalled calls t.Error if FakeKVGetter.List was not called
func (f *FakeKVGetter) AssertListCalled(t KVGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) == 0 {
		t.Error("FakeKVGetter.List not called, expected at least one")
	}
}

// ListNotCalled returns true if FakeKVGetter.List was not called
func (f *FakeKVGetter) ListNotCalled() bool {
	return len(f.ListCalls) == 0
}

// AssertListNotCalled calls t.Error if FakeKVGetter.List was called
func (f *FakeKVGetter) AssertListNotCalled(t KVGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) != 0 {
		t.Error("FakeKVGetter.List called, expected none")
	}
}

// ListCalledOnce returns true if FakeKVGetter.List was called exactly once
func (f *FakeKVGetter) ListCalledOnce() bool {
	return len(f.ListCalls) == 1
}

// AssertListCalledOnce calls t.Error if FakeKVGetter.List was not called exactly once
func (f *FakeKVGetter) AssertListCalledOnce(t KVGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) != 1 {
		t.Errorf("FakeKVGetter.List called %d times, expected 1", len(f.ListCalls))
	}
}

// ListCalledN returns true if FakeKVGetter.List was called at least n times
func (f *FakeKVGetter) ListCalledN(n int) bool {
	return len(f.ListCalls) >= n
}

// AssertListCalledN calls t.Error if FakeKVGetter.List was called less than n times
func (f *FakeKVGetter) AssertListCalledN(t KVGetterTestingT, n int) {
	t.Helper()
	if len(f.ListCalls) < n {
		t.Errorf("FakeKVGetter.List called %d times, expected >= %d", len(f.ListCalls), n)
	}
}

// ListCalledWith returns true if FakeKVGetter.List was called with the given values
func (_f8 *FakeKVGetter) ListCalledWith(ident1 string, ident2 *consul.QueryOptions) (found bool) {
	for _, call := range _f8.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertListCalledWith calls t.Error if FakeKVGetter.List was not called with the given values
func (_f9 *FakeKVGetter) AssertListCalledWith(t KVGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var found bool
	for _, call := range _f9.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeKVGetter.List not called with expected parameters")
	}
}

// ListCalledOnceWith returns true if FakeKVGetter.List was called exactly once with the given values
func (_f10 *FakeKVGetter) ListCalledOnceWith(ident1 string, ident2 *consul.QueryOptions) bool {
	var count int
	for _, call := range _f10.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertListCalledOnceWith calls t.Error if FakeKVGetter.List was not called exactly once with the given values
func (_f11 *FakeKVGetter) AssertListCalledOnceWith(t KVGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var count int
	for _, call := range _f11.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeKVGetter.List called %d times with expected parameters, expected one", count)
	}
}

// ListResultsForCall returns the result values for the first call to FakeKVGetter.List with the given values
func (_f12 *FakeKVGetter) ListResultsForCall(ident1 string, ident2 *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error, found bool) {
	for _, call := range _f12.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			ident3 = call.Results.Ident3
			ident4 = call.Results.Ident4
			ident5 = call.Results.Ident5
			found = true
			break
		}
	}

	return
}
