// generated by "charlatan -output=./consulclient_charlatan.go ConsulClient".  DO NOT EDIT.

package env

// ConsulClientAgentInvocation represents a single call of FakeConsulClient.Agent
type ConsulClientAgentInvocation struct {
	Results struct {
		Ident1 Selfer
	}
}

// ConsulClientKVInvocation represents a single call of FakeConsulClient.KV
type ConsulClientKVInvocation struct {
	Results struct {
		Ident1 KVGetter
	}
}

// ConsulClientTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type ConsulClientTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeConsulClient is a mock implementation of ConsulClient for testing.
Use it in your tests as in this example:

	package example

	func TestWithConsulClient(t *testing.T) {
		f := &env.FakeConsulClient{
			AgentHook: func() (ident1 Selfer) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeAgent ...
		f.AssertAgentCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeAgent.
*/
type FakeConsulClient struct {
	AgentHook func() Selfer
	KVHook    func() KVGetter

	AgentCalls []*ConsulClientAgentInvocation
	KVCalls    []*ConsulClientKVInvocation
}

// NewFakeConsulClientDefaultPanic returns an instance of FakeConsulClient with all hooks configured to panic
func NewFakeConsulClientDefaultPanic() *FakeConsulClient {
	return &FakeConsulClient{
		AgentHook: func() (ident1 Selfer) {
			panic("Unexpected call to ConsulClient.Agent")
		},
		KVHook: func() (ident1 KVGetter) {
			panic("Unexpected call to ConsulClient.KV")
		},
	}
}

// NewFakeConsulClientDefaultFatal returns an instance of FakeConsulClient with all hooks configured to call t.Fatal
func NewFakeConsulClientDefaultFatal(t ConsulClientTestingT) *FakeConsulClient {
	return &FakeConsulClient{
		AgentHook: func() (ident1 Selfer) {
			t.Fatal("Unexpected call to ConsulClient.Agent")
			return
		},
		KVHook: func() (ident1 KVGetter) {
			t.Fatal("Unexpected call to ConsulClient.KV")
			return
		},
	}
}

// NewFakeConsulClientDefaultError returns an instance of FakeConsulClient with all hooks configured to call t.Error
func NewFakeConsulClientDefaultError(t ConsulClientTestingT) *FakeConsulClient {
	return &FakeConsulClient{
		AgentHook: func() (ident1 Selfer) {
			t.Error("Unexpected call to ConsulClient.Agent")
			return
		},
		KVHook: func() (ident1 KVGetter) {
			t.Error("Unexpected call to ConsulClient.KV")
			return
		},
	}
}

func (f *FakeConsulClient) Reset() {
	f.AgentCalls = []*ConsulClientAgentInvocation{}
	f.KVCalls = []*ConsulClientKVInvocation{}
}

func (_f1 *FakeConsulClient) Agent() (ident1 Selfer) {
	invocation := new(ConsulClientAgentInvocation)

	ident1 = _f1.AgentHook()

	invocation.Results.Ident1 = ident1

	_f1.AgentCalls = append(_f1.AgentCalls, invocation)

	return
}

// AgentCalled returns true if FakeConsulClient.Agent was called
func (f *FakeConsulClient) AgentCalled() bool {
	return len(f.AgentCalls) != 0
}

// AssertAgentCalled calls t.Error if FakeConsulClient.Agent was not called
func (f *FakeConsulClient) AssertAgentCalled(t ConsulClientTestingT) {
	t.Helper()
	if len(f.AgentCalls) == 0 {
		t.Error("FakeConsulClient.Agent not called, expected at least one")
	}
}

// AgentNotCalled returns true if FakeConsulClient.Agent was not called
func (f *FakeConsulClient) AgentNotCalled() bool {
	return len(f.AgentCalls) == 0
}

// AssertAgentNotCalled calls t.Error if FakeConsulClient.Agent was called
func (f *FakeConsulClient) AssertAgentNotCalled(t ConsulClientTestingT) {
	t.Helper()
	if len(f.AgentCalls) != 0 {
		t.Error("FakeConsulClient.Agent called, expected none")
	}
}

// AgentCalledOnce returns true if FakeConsulClient.Agent was called exactly once
func (f *FakeConsulClient) AgentCalledOnce() bool {
	return len(f.AgentCalls) == 1
}

// AssertAgentCalledOnce calls t.Error if FakeConsulClient.Agent was not called exactly once
func (f *FakeConsulClient) AssertAgentCalledOnce(t ConsulClientTestingT) {
	t.Helper()
	if len(f.AgentCalls) != 1 {
		t.Errorf("FakeConsulClient.Agent called %d times, expected 1", len(f.AgentCalls))
	}
}

// AgentCalledN returns true if FakeConsulClient.Agent was called at least n times
func (f *FakeConsulClient) AgentCalledN(n int) bool {
	return len(f.AgentCalls) >= n
}

// AssertAgentCalledN calls t.Error if FakeConsulClient.Agent was called less than n times
func (f *FakeConsulClient) AssertAgentCalledN(t ConsulClientTestingT, n int) {
	t.Helper()
	if len(f.AgentCalls) < n {
		t.Errorf("FakeConsulClient.Agent called %d times, expected >= %d", len(f.AgentCalls), n)
	}
}

func (_f2 *FakeConsulClient) KV() (ident1 KVGetter) {
	invocation := new(ConsulClientKVInvocation)

	ident1 = _f2.KVHook()

	invocation.Results.Ident1 = ident1

	_f2.KVCalls = append(_f2.KVCalls, invocation)

	return
}

// KVCalled returns true if FakeConsulClient.KV was called
func (f *FakeConsulClient) KVCalled() bool {
	return len(f.KVCalls) != 0
}

// AssertKVCalled calls t.Error if FakeConsulClient.KV was not called
func (f *FakeConsulClient) AssertKVCalled(t ConsulClientTestingT) {
	t.Helper()
	if len(f.KVCalls) == 0 {
		t.Error("FakeConsulClient.KV not called, expected at least one")
	}
}

// KVNotCalled returns true if FakeConsulClient.KV was not called
func (f *FakeConsulClient) KVNotCalled() bool {
	return len(f.KVCalls) == 0
}

// AssertKVNotCalled calls t.Error if FakeConsulClient.KV was called
func (f *FakeConsulClient) AssertKVNotCalled(t ConsulClientTestingT) {
	t.Helper()
	if len(f.KVCalls) != 0 {
		t.Error("FakeConsulClient.KV called, expected none")
	}
}

// KVCalledOnce returns true if FakeConsulClient.KV was called exactly once
func (f *FakeConsulClient) KVCalledOnce() bool {
	return len(f.KVCalls) == 1
}

// AssertKVCalledOnce calls t.Error if FakeConsulClient.KV was not called exactly once
func (f *FakeConsulClient) AssertKVCalledOnce(t ConsulClientTestingT) {
	t.Helper()
	if len(f.KVCalls) != 1 {
		t.Errorf("FakeConsulClient.KV called %d times, expected 1", len(f.KVCalls))
	}
}

// KVCalledN returns true if FakeConsulClient.KV was called at least n times
func (f *FakeConsulClient) KVCalledN(n int) bool {
	return len(f.KVCalls) >= n
}

// AssertKVCalledN calls t.Error if FakeConsulClient.KV was called less than n times
func (f *FakeConsulClient) AssertKVCalledN(t ConsulClientTestingT, n int) {
	t.Helper()
	if len(f.KVCalls) < n {
		t.Errorf("FakeConsulClient.KV called %d times, expected >= %d", len(f.KVCalls), n)
	}
}
